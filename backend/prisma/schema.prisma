generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                  @id @default(autoincrement())
  username         String               @unique @db.VarChar(50)
  password         String               @db.VarChar(255)
  email            String               @unique @db.VarChar(100)
  fullName         String?              @db.VarChar(100)
  address          String?              @db.VarChar(255)
  phoneNumber      String?              @db.VarChar(20)
  roles            UserRole[]
  kycVerified      Boolean              @default(false)
  profilePicture   String?              @db.VarChar(255)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  isDeleted        Boolean              @default(false)
  commerceProducts CommerceProduct[]
  claimedDonations Donation[]           @relation("UserClaims")
  donations        Donation[]           @relation("UserDonations")
  participations   FundingParticipant[]
  kycDocuments     KnowYourCustomer[]
  posts            Post[]
  requests         Request[]
  scrapProducts    ScrapProduct[]
  checkpoints      Checkpoint[]         @relation("CheckpointToUser")
  notifications    Notification[]       @relation("NotificationToUser")
  UserCampaign     UserCampaign[]
}

model KnowYourCustomer {
  id                   Int          @id @default(autoincrement())
  documentType         DocumentType
  identificationNumber String       @unique @db.VarChar(50)
  picture              String       @db.VarChar(255)
  userId               Int
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  createdBy            String?      @db.VarChar(50)
  updatedBy            String?      @db.VarChar(50)
  user                 User         @relation(fields: [userId], references: [id])
}

model ScrapProduct {
  id        Int      @id @default(autoincrement())
  type      String   @db.VarChar(100)
  price     Float
  details   String
  image     String   @db.VarChar(255)
  dealerId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  dealer    User     @relation(fields: [dealerId], references: [id])
}

model Donation {
  id        Int             @id @default(autoincrement())
  name      String          @db.VarChar(255)
  donatorId Int
  image     String          @db.VarChar(255)
  details   String
  claimerId Int?
  category  ProductCategory
  location  String          @db.VarChar(255)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  isDeleted Boolean         @default(false)
  claimer   User?           @relation("UserClaims", fields: [claimerId], references: [id])
  donator   User            @relation("UserDonations", fields: [donatorId], references: [id])
}

model Post {
  id          Int      @id @default(autoincrement())
  authorId    Int
  title       String   @db.VarChar(255)
  description String
  content     String
  image       String
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
}

model Request {
  id             Int                  @id @default(autoincrement())
  title          String               @db.VarChar(255)
  requesterId    Int
  description    String
  goal           Float
  date           DateTime
  duration       Int
  location       String               @db.VarChar(255)
  totalAmount    Float                @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  isDeleted      Boolean              @default(false)
  participations FundingParticipant[]
  requester      User                 @relation(fields: [requesterId], references: [id])
  UserCampaign   UserCampaign[]
}

model UserCampaign {
  id        Int      @id @default(autoincrement())
  userId    Int
  requestId Int
  joinedAt  DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  request Request @relation(fields: [requestId], references: [id])

  @@unique([userId, requestId]) // Prevent duplicate entries
}

model FundingParticipant {
  id        Int      @id @default(autoincrement())
  requestId Int
  userId    Int
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  request   Request  @relation(fields: [requestId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model CommerceProduct {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  details    String
  image      String   @db.VarChar(255)
  price      Float
  postedById Int
  status     String   @db.VarChar(50)
  duration   Int
  postDate   DateTime
  expiryDate DateTime
  location   String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)
  postedBy   User     @relation(fields: [postedById], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  message   String
  sentDate  DateTime @default(now())
  isDeleted Boolean  @default(false)
  users     User[]   @relation("NotificationToUser")
}

model Checkpoint {
  id        Int      @id @default(autoincrement())
  name      String
  longitude Float
  latitude  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  users     User[]   @relation("CheckpointToUser")
}

enum UserRole {
  ADMIN
  VEHICLE_MANAGER
  SCRAP_DEALER
  REGULAR_USER
  FUNDRAISER
}

enum DocumentType {
  PASSPORT
  DRIVER_LICENSE
  NATIONAL_ID
  GOVERNMENT_ISSUED
}

enum ProductCategory {
  ELECTRONICS
  FURNITURE
  VEHICLES
  MACHINERY
  MISCELLANEOUS
}
